1.What are Wrapper Classes.
object representation of primitive data types
Classes that encapsulate primitive data types within an Object.
We need when
i. Working with Collections
ii. Passing method arguments where it expects Class object.
Integer - Wraps an int value.
Double - Wraps a double value.
Boolean - Wraps a boolean value.
Character - Wraps a char value.
Byte - Wraps a byte value.
Short - Wraps a short value.
Long - Wraps a long value.
Float - Wraps a float value.

Wrapper classes provide methods to manipulate, convert, and access the wrapped primitive value.
 They also provide constants, such as MIN_VALUE and MAX_VALUE, which represent the
  minimum and maximum values that can be stored by the primitive type.



  2.What is Autoboxing?
  Autoboxing is a feature in Java (and some other programming languages) that allows automatic conversion of primitive data
  types into their corresponding wrapper objects, and vice versa,

  3. What is Typecasting?
  The conversion from an object of a subclass to an object of its superclass is called upcasting.
   In object-oriented programming, upcasting is a type of implicit conversion where an object of a subclass can
   be treated as an object of its superclass. This conversion happens automatically without the need for explicit casting.

   4. COnstant Pools
   String Constant Pool: The String pool is a special area in the Java heap memory that stores unique string literals.
           When you create a string using string literals (e.g., String str = "hello";), Java checks if the string already exists in the pool. If it does, it returns the reference to the existing string, otherwise, it creates a new string in the pool.
           String pool helps in conserving memory by avoiding duplicate string objects with the same content.

     Integer Cache: Java caches integer objects in the range of -128 to 127 (inclusive) to optimize memory usage.
                    When you use autoboxing for integer values within this range (e.g., Integer i = 5;), Java reuses existing Integer objects from the cache instead of creating new ones.
                    This caching mechanism reduces memory consumption by avoiding the creation of multiple Integer objects for frequently used integer values.

   Long Cache (Java 9 onwards):

   Similar to the Integer cache, Java 9 introduced a Long cache for values between -128 to 127 (inclusive).
   Long values within this range are cached to improve performance and memory usage when autoboxing.

   Other Caches:

   Other types of caching may exist in Java libraries or frameworks for specific purposes, such as caching frequently accessed objects or data to improve performance.
   For example, some libraries may provide caches for database query results, HTTP responses, or computed values to avoid redundant computations or I/O operations.



   5. int vs BigInteger
   int:

   int is a primitive data type in Java used to represent 32-bit signed integers.
   Its range is from -2,147,483,648 to 2,147,483,647.
   Arithmetic operations involving int are fast and efficient because they are directly supported by the hardware.BigInteger:

   BigInteger is a class in the java.math package that represents arbitrary-precision integers.
  It can represent integers of any size, limited only by the amount of memory available to the program.
 BigInteger is useful when dealing with extremely large integers that exceed the range of int.
  Arithmetic operations involving BigInteger are slower compared to int because they involve software-based algorithms to handle arbitrarily large numbers.
   When to use int or BigInteger:  Use int when you are sure that the values you are dealing with will fit within the range of a 32-bit signed integer (-2,147,483,648 to 2,147,483,647). int is more efficient in terms of memory and performance for smaller integer values.
 Use BigInteger when you need to work with very large integers or when you need to guarantee that your calculations won't overflow or underflow, regardless of the size of the numbers involved. BigInteger is suitable for scenarios where precision and range matter more than performance, such as cryptography or large numerical computations.


 6. FLoat vs Double
 float: Single-precision floating-point numbers are represented using 32 bits, with approximately 7 decimal digits of precision.
 double: Double-precision floating-point numbers are represented using 64 bits, providing approximately 15 decimal digits of precision.
  Use float when memory efficiency is crucial and the range and precision provided by float are adequate. Use double for general-purpose numerical computations where higher precision and a larger range are required.


  7.Why characters are used for passwords?
  They include letters (both uppercase and lowercase), numbers, and special characters, allowing for a diverse set of possible combinations.Using characters in passwords enhances security by increasing the number of possible combinations. A larger pool of potential passwords makes it more challenging for attackers to employ brute-force or dictionary-based attacks


  8. BigInteger vs BigDecimal
Representation: BigInteger represents whole numbers (integers) without a decimal point, while BigDecimal represents decimal numbers with a decimal point and potentially a fractional part.

Usage: Use BigInteger for integer arithmetic when dealing with extremely large numbers or when you need exact integer results. Use BigDecimal for decimal arithmetic when dealing with precise numerical calculations involving decimal numbers, such as financial calculations, where accuracy is critical.

Rounding: BigDecimal provides more extensive support for rounding and precision control, which is essential for accurate decimal arithmetic. It allows you to specify rounding modes and control the number of digits after the decimal point.
  9. StringBuilder vs StringBUfffer
choose StringBuilder for better performance in single-threaded scenarios or when thread safety is not a concern.
 Use StringBuffer when you need thread safety, such as in multi-threaded applications, at the expense of slightly
 lower performance due to synchronization overhead.

 10. what is Character Encoding?
Character encoding is a system that assigns a unique numeric code to each character in a character set. It provides a way to represent and interpret characters in a digital format, such as text files or network communication protocols, where data is represented using binary (0s and 1s).
CHaracter Encoding serves two main parts:
i. Character Representation:It defines how characters are represented as binary data. Each character in a character set is assigned a specific binary code, which allows computers to store, transmit, and process textual data.
ii. Character Interpretation: It provides rules for interpreting binary data as characters. By knowing the character encoding used, software applications can correctly decode binary data into human-readable characters and vice versa.


Common character encoding schemes include:

ASCII (American Standard Code for Information Interchange): Originally designed for encoding English characters, ASCII assigns a 7-bit binary code to each character, allowing for a total of 128 different characters.

UTF-8 (Unicode Transformation Format - 8-bit): UTF-8 is a variable-width character encoding that supports the entire Unicode character set. It can represent characters from various languages and scripts and uses 8-bit code units. UTF-8 is backward compatible with ASCII, as the first 128 characters of Unicode correspond to the ASCII character set.

UTF-16 (Unicode Transformation Format - 16-bit): UTF-16 is another variable-width character encoding that supports the Unicode character set. It uses 16-bit code units and can represent a broader range of characters compared to UTF-8. However, it may use more memory and storage space for certain characters.

ISO-8859-1 (Latin-1): ISO-8859-1 is an 8-bit character encoding that supports the Latin alphabet and is commonly used for Western European languages. It can represent characters from English, French, Spanish, German, and other languages using the Latin script.

Character encoding is essential for ensuring the proper communication and interpretation of textual data across different computer systems, software applications, and networks. However, mismatches in character encoding can lead to data corruption, garbled text, or misinterpretation of characters. Therefore, it's crucial to use consistent character encoding throughout the entire data processing pipeline to maintain data integrity and interoperability.

11. what is java character encoding?

Character encoding is the process of mapping characters to numerical codes for storage and transmission. In computing, characters are represented internally as binary data, and character encoding defines how these binary data are interpreted to represent characters. It involves assigning a unique numerical value (code point) to each character in a character set.

In Java, character encoding is crucial for reading and writing text data, handling strings, and converting characters between different representations. The default character encoding used in Java is UTF-16 (16-bit Unicode Transformation Format). UTF-16 represents each character in the Unicode character set using one or more 16-bit code units.

Key points about Java character encoding:

UTF-16: Java uses UTF-16 as its internal character encoding. This means that characters in Java strings are stored using the UTF-16 encoding scheme.

Unicode Support: UTF-16 allows Java to support Unicode, which is a universal character encoding standard that aims to represent every character in every language and writing system.

Charset Class: Java provides the Charset class in the java.nio.charset package to represent character encodings. It allows you to convert between different character encodings using the CharsetEncoder and CharsetDecoder classes.

File Encoding: When reading from or writing to files or streams in Java, you need to specify the character encoding explicitly. This ensures that text data is interpreted correctly.

Platform Default Encoding: Java also provides methods like String.getBytes() and new String(byte[]) that use the platform's default character encoding if no encoding is specified explicitly. However, it's recommended to specify the encoding explicitly to avoid inconsistencies across different platforms.

Overall, character encoding plays a crucial role in Java for handling text data, supporting internationalization, and ensuring interoperability with systems using different encoding schemes. UTF-16 is the default character encoding in Java, providing support for Unicode characters and enabling Java applications to work with text data from various languages and writing systems.


 12. character encoding plays in String.getBytes()?
 The String.getBytes() method in Java is used to convert a string into a byte array, which represents the string's characters encoded using a specific character encoding. The role of character encoding in String.getBytes() is crucial because it determines how the characters in the string are converted to bytes.

 Here's how character encoding plays a role in String.getBytes():

 Encoding Parameter:

 The getBytes() method allows you to specify the character encoding to be used for encoding the string into bytes.
 If you call getBytes() without providing an encoding, it will use the platform's default character encoding, which can lead to platform-dependent behavior. It's recommended to always specify the desired encoding explicitly.
 Conversion:

 When you call getBytes() with a specific character encoding, Java internally converts each character in the string to its corresponding byte representation according to the specified encoding scheme.
 The characters are encoded into bytes according to the rules defined by the specified character encoding.
 Byte Array:

 The method returns a byte array containing the encoded representation of the string based on the specified character encoding.
 Each byte in the byte array represents one or more characters from the original string, encoded using the specified character encoding.
 Example:

 java
 Copy code
 String str = "Hello, world!";
 byte[] byteArray = str.getBytes("UTF-8");
 In this example, getBytes("UTF-8") specifies that the string str should be encoded using the UTF-8 character encoding. The method will return a byte array containing the UTF-8 encoded representation of the string.

 Overall, character encoding in String.getBytes() is essential for converting strings to bytes while ensuring that the encoding scheme used is appropriate for the intended purpose and interoperability with other systems. It allows strings to be encoded and transmitted in various encoding formats, ensuring correct interpretation by other applications or systems that may use different character encodings.